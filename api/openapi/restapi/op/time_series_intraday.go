// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeSeriesIntradayHandlerFunc turns a function with the right signature into a time series intraday handler
type TimeSeriesIntradayHandlerFunc func(TimeSeriesIntradayParams) TimeSeriesIntradayResponder

// Handle executing the request and returning a response
func (fn TimeSeriesIntradayHandlerFunc) Handle(params TimeSeriesIntradayParams) TimeSeriesIntradayResponder {
	return fn(params)
}

// TimeSeriesIntradayHandler interface for that can handle valid time series intraday params
type TimeSeriesIntradayHandler interface {
	Handle(TimeSeriesIntradayParams) TimeSeriesIntradayResponder
}

// NewTimeSeriesIntraday creates a new http.Handler for the time series intraday operation
func NewTimeSeriesIntraday(ctx *middleware.Context, handler TimeSeriesIntradayHandler) *TimeSeriesIntraday {
	return &TimeSeriesIntraday{Context: ctx, Handler: handler}
}

/*TimeSeriesIntraday swagger:route GET /getTimeSeriesIntraday timeSeriesIntraday

TimeSeriesIntraday

*/
type TimeSeriesIntraday struct {
	Context *middleware.Context
	Handler TimeSeriesIntradayHandler
}

func (o *TimeSeriesIntraday) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTimeSeriesIntradayParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TimeSeriesIntradayOKBody time series intraday o k body
//
// swagger:model TimeSeriesIntradayOKBody
type TimeSeriesIntradayOKBody struct {

	// result
	// Required: true
	Result interface{} `json:"result"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *TimeSeriesIntradayOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// result
		// Required: true
		Result interface{} `json:"result"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Result = props.Result
	return nil
}

// Validate validates this time series intraday o k body
func (o *TimeSeriesIntradayOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TimeSeriesIntradayOKBody) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("timeSeriesIntradayOK"+"."+"result", "body", o.Result); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TimeSeriesIntradayOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TimeSeriesIntradayOKBody) UnmarshalBinary(b []byte) error {
	var res TimeSeriesIntradayOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
